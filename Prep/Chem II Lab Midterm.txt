global.ReadableStream = global.ReadableStream || require("node:stream/web").ReadableStream;

import dotenv from "dotenv";
dotenv.config();

import { Client, GatewayIntentBits } from "discord.js";
import express from "express";
import cron from "cron";
import fetch from "cross-fetch";
global.fetch = fetch;
import { HfInference } from "@huggingface/inference";

// Create a new Hugging Face inference client
const hf = new HfInference(process.env.HUGGINGFACE_API_KEY);

// Create a new Express app
const app = express();
const port = process.env.PORT || 8080;

// Channel ID and bot token
const CHANNEL_ID = "785014089801793539";
const token = process.env.LUIGI_TOKEN;

// Create a new Discord client instance
const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
    GatewayIntentBits.GuildMembers,
  ],
});

let lastRespondedMessageId = null;

client.login(token);

// Bot startup
client.once("ready", () => {
  console.log(`Logged in as ${client.user.tag}!`);
  scheduleDailyMessages();
});

// Improved text generation using Zephyr-7b
async function generateText(prompt, botUser) {
  const maxRetries = 5;
  let attempt = 0;

  while (attempt < maxRetries) {
    try {
      const response = await hf.textGeneration({
        model: "HuggingFaceH4/zephyr-7b-beta",
        inputs: prompt,
        parameters: { max_new_tokens: 150, temperature: 0.9 },
      });

      let generatedText = response.generated_text;

      // Clean the response to extract only Luigi's output
      if (generatedText.includes("Luigi:")) {
        generatedText = generatedText.split("Luigi:")[1].trim();
      } else {
        generatedText = generatedText.trim();
      }

      // Remove anything after 'User says:' to prevent hypothetical user prompts
      if (generatedText.includes("User says:")) {
        generatedText = generatedText.split("User says:")[0].trim();
      }

      if (generatedText) return generatedText;
      console.warn(`Retry ${attempt + 1}: Invalid response.`);
      attempt++;
    } catch (error) {
      console.error("Error generating text:", error);
      return "Mamma mia! I-a can't process-a this right now... Maybe it's the spaghetti... or my, uh, diaper!";
    }
  }
  return "Oh, no... I-a couldn't-a respond! Try-a again! Wahoo!";
}

// Main bot message handling
client.on("messageCreate", async (message) => {
  if (message.author.bot) return;

  const content = message.content.trim().toLowerCase();
  console.log(`Received: "${content}" from ${message.author.tag}`);

  // Responding to mentions
  if (message.mentions.has(client.user)) {
    console.log("Generating Luigi's response...");
    const prompt = `
You are Luigi, Mario's brother from Super Mario Bros. You are cheerful, goofy, and often speak with an exaggerated Italian accent. You sometimes mention your full diaper, but you always try to be helpful and friendly, even in awkward situations. Respond in a fun and lighthearted way, using phrases like "Mamma mia!", "Wahoo!", and "Let's-a go!".

User says: "${message.content}"
Luigi:`;
    const response = await generateText(prompt, client.user);
    message.reply(response);
    return;
  }

  // Predefined Luigi responses for specific triggers
  if (/mario/.test(content)) {
    message.channel.send(
      "M-Mario? Oh boy, he's-a always the hero... But Luigi's-a here too! Let's-a go!"
    );
    return;
  }

  if (/diaper/.test(content)) {
    message.channel.send(
      "Uh-oh... Mamma mia, my diaper's-a feeling a little... full. Maybe I shouldn't have eaten all that pasta!"
    );
    return;
  }

  if (/jump/.test(content)) {
    message.channel.send(
      "Wahoo! I-a love jumping... But, uh, not too high! I get-a dizzy!"
    );
    return;
  }

  if (/power-up/.test(content)) {
    message.channel.send(
      "Power-up? Oh, yes! Give-a me that Fire Flower! Or, uh, maybe just a snack. Heh... Heh..."
    );
    return;
  }

  if (/princess peach/.test(content)) {
    message.channel.send(
      "P-Princess Peach? Oh, uh, sheâ€™s-a so nice... I-I-a hope she notices me this time! Heh..."
    );
    return;
  }
});

// Send a daily Luigi message
function sendTheMessage() {
  const channel = client.channels.cache.get(CHANNEL_ID);
  if (channel) {
    channel.send(
      "Luigi here! It's-a me! Now, who wants-a to hear a joke?!"
    );
  }
}

function scheduleDailyMessages() {
  const luigiJob = new cron.CronJob(
    "30 12 * * *",
    sendTheMessage,
    null,
    true,
    "America/New_York"
  );
  luigiJob.start();
}

// Express route to check bot status
app.get("/", (req, res) => {
  const now = new Date();
  const formattedDate = now.toLocaleString();
  res.send(`Bot is running<br>Current date and time: ${formattedDate}`);
});

app.listen(port, () => {
  console.log(`Luigi Bot is running on port ${port}`);
});